Install: msysgit.github.io

==========
Configure Git
==========
git config --global user.name "navspeak"
git config --global user.email "navneet.sahay@gmail.com"
git config --global --list
git config --global core.editor vim
git config --global help.autocorrect 1

$ git statsu
WARNING: You called a Git command named 'statsu', which does not exist.
Continuing in 0.1 seconds, assuming that you meant 'status'.
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

git confif user.name "differentName"
====
creating local repo
====
cd GitFundamentals
$ git init
Initialized empty Git repository in E:/git-material/GitFundamentals/.git/
sony@sony-PC MINGW32 /e/git-material/GitFundamentals (master)
$ ls -la
total 8
drwxr-xr-x 1 sony 197121 0 Jun  8 20:31 ./
drwxr-xr-x 1 sony 197121 0 Jun  8 20:28 ../
drwxr-xr-x 1 sony 197121 0 Jun  8 20:31 .git/

sony@sony-PC MINGW32 /e/git-material/GitFundamentals (master)
$ ssh-keygen -t rsa -b 4096 -C "xxx@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/sony/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/sony/.ssh/id_rsa.
Your public key has been saved in /c/Users/sony/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:xxx navneet.sahay@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
|   
+----[SHA256]-----+

sony@sony-PC MINGW32 /e/git-material/GitFundamentals (master)
$ notepad /c/Users/sony/.ssh/id_rsa.pub
xxxx is the passphrase

$ echo "Hello, Git" > README.txt
$ git status
On branch master
No commits yet
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        README.txt
nothing added to commit but untracked files present (use "git add" to track)

$git add README.txt
$ git status
On branch master
No commits yet
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   README.txt

$ git commit -m "Added README.txt"
[master (root-commit) 4d50b31] Added README.txt
 1 file changed, 1 insertion(+)
 create mode 100644 README.txt

$ git log
commit 4d50b310b7a55085a29182d8b8bd823da4055995 (HEAD -> master)
Author: navspeak <xxx@gmail.com>
Date:   Fri Jun 8 21:27:53 2018 +0530
    Added README.txt

$ echo "Hello again" >> README.txt
$ git add -u
$ git status
$ git commit -m "Updated README.txt"

$ git log
commit 90d5d525b9b99e3e5c5e2d7ace5687d6e1de9f90 (HEAD -> master)
Author: navspeak <navneet.sahay@gmail.com>
Date:   Fri Jun 8 21:37:20 2018 +0530
    Updated README.txt
commit 4d50b310b7a55085a29182d8b8bd823da4055995
Author: navspeak <navneet.sahay@gmail.com>
Date:   Fri Jun 8 21:27:53 2018 +0530
    Added README.txt
===
Getting diff
===
Using SHA
------------
$ git diff 4d50b3..90d5d52
diff --git a/README.txt b/README.txt
index b7aec52..81553b8 100644
--- a/README.txt
+++ b/README.txt
@@ -1 +1,2 @@
 Hello, Git
+Hello again

=> Using HEAD~ notation
=> HEAD = latest version
=> HEAD~1 = one version before HEAD

$ git diff HEAD~2..HEAD
diff --git a/README.txt b/README.txt
index b7aec52..511766f 100644
--- a/README.txt
+++ b/README.txt
@@ -1 +1,3 @@
 Hello, Git
+Hello again
+Hello again again

sony@sony-PC MINGW32 /e/git-material/GitFundamentals (master)
$ git diff HEAD..HEAD~2
diff --git a/README.txt b/README.txt
index 511766f..b7aec52 100644
--- a/README.txt
+++ b/README.txt
@@ -1,3 +1 @@
 Hello, Git
-Hello again
-Hello again again

Try git diff HEAD~1.. (nothing specified means HEAD)

===
adding new file
===
$ touch file1.txt file2.txt
$ git add -u will have no effect as nothing is updated
Use git add -A

$ git commit -m "Added cool new feature"

===
===
Add content to file1.txt
Update README.txt

now, git add file1.txt and commit it first

Try rm file2.txt. Then git add -u

Suppose you had four lines in README.txt and deleted some. 
You then realize, that's not what was intented. So you can :
git checkout README.txt (which will get README.txt to last committed change)

Now, if you had removed some lines in README.txt and deleted some file
I could in that case do:
$git reset --hard
HEAD is now at a6333ca Reorganized the feature (which is the HEAD)


$ git log --oneline
a6333ca (HEAD -> master) Reorganized the feature
cc47c11 Fixed typo in README.txt and added additional info about other features
d2f3cce Fixed bug#1234
5995993 Added cool new feature
fa370cd Updated README.txt again
90d5d52 Updated README.txt
4d50b31 Added README.txt

If I wanted to reset to say cc47c11 (HEAD~1)

git reset --soft HEAD~1
(This will put in staging area and not commit)

cc47c11 (HEAD -> master) Fixed typo in README.txt and added additional info about other features
d2f3cce Fixed bug#1234
5995993 Added cool new feature
fa370cd Updated README.txt again
90d5d52 Updated README.txt
4d50b31 Added README.txt

5995993 (HEAD -> master) Added cool new feature
fa370cd Updated README.txt again
90d5d52 Updated README.txt
4d50b31 Added README.txt
=====
Recovering 
=====

$ git reflog --oneline
5995993 (HEAD -> master) HEAD@{0}: reset: moving to HEAD~2
cc47c11 HEAD@{1}: reset: moving to HEAD~1
a6333ca HEAD@{2}: reset: moving to HEAD
a6333ca HEAD@{3}: commit: Reorganized the feature
cc47c11 HEAD@{4}: commit: Fixed typo in README.txt and added additional info about other features
d2f3cce HEAD@{5}: commit: Fixed bug#1234
5995993 (HEAD -> master) HEAD@{6}: commit: Added cool new feature
fa370cd HEAD@{7}: commit: Updated README.txt again
90d5d52 HEAD@{8}: commit: Updated README.txt
4d50b31 HEAD@{9}: commit (initial): Added README.txt

$ git reset --hard a6333ca
HEAD is now at a6333ca Reorganized the feature

https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/

=========
git log --graph --oneline
https://www.perforce.com/blog/git-beyond-basics-using-shallow-clones
git log --oneline | wc -l
git log --oneline --graph
git shortlog (git log --format=short) author and commit msg
git shortlog -sne (summary, numerical order, email)
See the last commit => git show HEAD | git show HEAD~1

sony@sony-PC MINGW32 /e/git-material/remoteRepoJquery/jquery (master)
$ git remote
origin

sony@sony-PC MINGW32 /e/git-material/remoteRepoJquery/jquery (master)
$ git remote -v
origin  https://github.com/jquery/jquery.git (fetch)
origin  https://github.com/jquery/jquery.git (push) (may be ssh)

sony@sony-PC MINGW32 /e/git-material/GitFundamentals (master)
$ ssh-keygen -t rsa -b 4096 -C "navneet.sahay@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/sony/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/sony/.ssh/id_rsa.
Your public key has been saved in /c/Users/sony/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:OwBccczzzzxxxxx navneet.sahay@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
|        *=o*..=*.|

+----[SHA256]-----+


$ ssh-keygen -p
Enter file in which the key is (/c/Users/sony/.ssh/id_rsa):
Enter old passphrase:
Enter new passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved with the new passphrase.



